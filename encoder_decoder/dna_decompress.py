# 
# Decompression application using adaptive arithmetic coding
# 
# Usage: python adaptive-arithmetic-decompress.py InputFile OutputFile
# This decompresses files generated by the adaptive-arithmetic-compress.py application.
# 
# Copyright (c) Project Nayuki
# 
# https://www.nayuki.io/page/reference-arithmetic-coding
# https://github.com/nayuki/Reference-arithmetic-coding
# 

import sys
import arithmeticcoding
python3 = sys.version_info.major >= 3
import numpy as np

np.random.seed(0)

def softmax(x):
    """Compute softmax values for each sets of scores in x."""
    e_x = np.exp(x - np.max(x))
    return e_x / e_x.sum()


def generate_probability(n_classes):
	return softmax(np.random.uniform(10, 11, n_classes))

def softmax(x):
    """Compute softmax values for each sets of scores in x."""
    e_x = np.exp(x - np.max(x))
    return e_x / e_x.sum()

# Command line main application function.
def main(args):
	# Handle command line arguments
	if len(args) != 2:
		sys.exit("Usage: python adaptive-arithmetic-decompress.py InputFile OutputFile")
	inputfile, outputfile = args
	
	# Perform file decompression
	with open(inputfile, "rb") as inp, open(outputfile, "wb") as out:
		bitin = arithmeticcoding.BitInputStream(inp)
		decompress(bitin, out)


def decompress(bitin, out):
	dec = arithmeticcoding.ArithmeticDecoder(32, bitin)
	probs = np.load('prob_temp.npy')
	i = 0
	output = []
	while True:
		# Decode and write one byte
		prob = probs[i]
		i += 1
		l = [int(p*10000000+1) for p in prob]
		l.append(1)
		freqs = arithmeticcoding.SimpleFrequencyTable(l)
		symbol = dec.read(freqs)
		if symbol == 5:  # EOF symbol
			break
		output.append(symbol)
		print(len(output))
		out.write(str(symbol))
	output = np.array(output)
	np.save('output', output)
		# freqs.increment(symbol)


# Main launcher
if __name__ == "__main__":
	main(sys.argv[1 : ])
